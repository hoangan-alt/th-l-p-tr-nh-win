using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace lab1_02
{
    internal class Student
    {
        private string studentID;
        private string fullName;
        private float averageScore;
        private string faculty;


        public string StudentID { get => studentID; set => studentID = value; }
        public string FullName { get => fullName; set => fullName = value; }
        public float AverageScore { get => averageScore; set => averageScore = value; }
        public string Faculty { get => faculty; set => faculty = value; }


        public Student()
        {
        }
        public Student(string studentID, string fullName, float averageScore, string faculty)
        {
            this.studentID = studentID;
            this.fullName = fullName;
            this.averageScore = averageScore;
            this.faculty = faculty;
        }

        public void Input()
        {
            Console.WriteLine(" Nhập MSSV: ");
            StudentID = Console.ReadLine();
            Console.WriteLine(" Nhập Họ tên sinh viên: ");
            FullName = Console.ReadLine();
            Console.WriteLine(" nhập điểm tb: ");
            AverageScore = float.Parse(Console.ReadLine());
            Console.WriteLine(" Nhập khoa: ");
            Faculty = Console.ReadLine();
        }

        public void Show()
        {
            Console.WriteLine(" MSSV: {0}; Họ Tên: {1}; Điểm TB: {2}; Khoa: {3} ", this.StudentID, this.FullName,this.AverageScore,this.Faculty);
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = System.Text.Encoding.UTF8;
            List<Student> studentList = new List<Student>();
            bool exit = false;
            while (!exit)
            {
                Console.WriteLine(" === MENU ===");
                Console.WriteLine(" 1. Thêm sinh viên ");
                Console.WriteLine(" 2. Hiển thị danh sách sinh viên ");
                Console.WriteLine(" 3. Xuất ra thông tin sinh viên thuộc khoa 'CNTT' ");
                Console.WriteLine(" 4. Xuất ra sinh viên có dtb lơn hơn 5 ");
                Console.WriteLine(" 5. Xuất ra danh sách sinh viên được sắp xếp theo dtb tăng dần ");
                Console.WriteLine(" 6. Xuất ra danh sách sinh viên có dtb lơn hơn bằng 5 và thuộc khoa 'CNTT' ");
                Console.WriteLine(" 7. Xuất ra danh sách sinh viên có dtb cao nhất và thuộc khoa 'CNTT' ");
                Console.WriteLine(" 8. hiển thị số lượng của từng xế loại trong danh sách ");
                Console.WriteLine(" 0. Thoát");
                Console.Write(" CHỌN CHỨC NĂNG (0-8)!");

                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        AddStudent(studentList);
                        break;
                    case "2":
                        DisplayStudentList(studentList);
                        break;
                    case "3":
                        DisplayStudentByFaculty(studentList, "CNTT");
                        break;
                    case "4":
                        DisplayStudentWithHighAverageScore(studentList, 5);
                        break;
                    case "5":
                        SortStudentByAverageScore(studentList);
                        break;
                    case "6":
                        DisplayStudentByFacultyAndScore(studentList, "CNTT", 5);
                        break;
                    case "7":
                        DisplayTopStudentByFaculty(studentList, "CNTT");
                        break;
                    case "8":
                        DisplayCountByFaculty(studentList);
                        break;
                    case "0":
                        exit = true;
                        Console.WriteLine(" Kết thúc trương trình. ");
                        break;
                    default:
                        Console.WriteLine(" TUỲ CHỌN KHÔNG HỢP LỆ ! VUI LÒNG CHỌN LẠI.");
                        break;
                }
                Console.WriteLine();
            }
        }
        static void AddStudent(List<Student> studentsList)
        {
            Console.WriteLine(" === Nhập thông tin sinh viên ===");
            Student student = new Student();
            student.Input();
            studentsList.Add(student);
            Console.WriteLine(" Thêm sinh viên thành công!");
        }
        static void DisplayStudentList(List<Student> studentList)
        {
            Console.WriteLine(" ===Danh sách chi tiết thông tin sinh viên ===");
            foreach (Student student in studentList)
            {
                student.Show();
            }
        }
        //3
        static void DisplayStudentByFaculty(List<Student> studentList, string faculty)
        {
            Console.WriteLine(" === Danh sách sinh viên thuộc khoa {0} ===", faculty);
            var students = studentList.Where(s => s.Faculty.Equals(faculty, StringComparison.OrdinalIgnoreCase));
            DisplayStudentList(studentList);
        }
        //4
        static void DisplayStudentWithHighAverageScore(List<Student> studentList, float minDTB)
        {
            Console.WriteLine(" === Danh sách sinh vien có dtb >= {0}", minDTB);
            var students = studentList.Where(s => s.AverageScore >= minDTB);
            DisplayStudentList(studentList);
        }
        //5
        static void SortStudentByAverageScore(List<Student> studentList)
        {
            Console.WriteLine(" === Danh sách sinh viên được sắp xếp theo dtb tăng dần === ");
            var sortedStudents = studentList.OrderBy(s => s.AverageScore).ToList();
            DisplayStudentList(studentList);
        }
        //6
        static void DisplayStudentByFacultyAndScore(List<Student> studentList, string faculty, float minDTB)
        {
            Console.WriteLine("=== Danh sách sinh viên có dtb => {0} và thuộc khoa {1} ==", minDTB, faculty);
            var students = studentList.Where(s => s.AverageScore >= minDTB && s.Faculty.Equals(faculty, StringComparison.OrdinalIgnoreCase)).ToList();
            DisplayStudentList(studentList);
        }
        static void DisplayTopStudentByFaculty(List<Student> studentList, string faculty)
        {
            Console.WriteLine("=== Danh sách sinh viên có điểm trung bình cao nhất thuộc khoa {0} ===", faculty);
            var studentsInFaculty = studentList.Where(s => s.Faculty.Equals(faculty, StringComparison.OrdinalIgnoreCase));
            if (!studentsInFaculty.Any())
            {
                Console.WriteLine("Không có sinh viên thuộc khoa {0}.", faculty);
                return;
            }
            float maxScore = studentsInFaculty.Max(s => s.AverageScore);
            var topStudents = studentsInFaculty.Where(s => s.AverageScore == maxScore);

            foreach (var student in topStudents)
            {
                student.Show();
            }
        }
        static void DisplayCountByFaculty(List<Student> studentList)
        {
            Console.WriteLine("=== Số lượng sinh viên theo từng khoa ===");
            var countByFaculty = studentList
                .GroupBy(s => s.Faculty, StringComparer.OrdinalIgnoreCase)
                .Select(g => new { Faculty = g.Key, Count = g.Count() });

            foreach (var item in countByFaculty)
            {
                Console.WriteLine("Khoa {0}: {1} sinh viên", item.Faculty, item.Count);
            }
        }
    }
        
 }

